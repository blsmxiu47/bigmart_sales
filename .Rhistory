ggtitle('Item Weights Reported - by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Item_Weight)) +
geom_boxplot() +
theme_classic() +
ggtitle('Item Weights Reported by Outlet')
?theme_classic
?element_rect
data %>%
ggplot(aes(x=Outlet_Identifier, y=Item_Weight)) +
geom_boxplot() +
theme_classic() +
theme(plot.background = element_rect(fill = 'steelblue1', color = 'black', size = 3))
ggtitle('Item Weights Reported by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Item_Weight)) +
geom_boxplot() +
theme_classic() +
theme(
plot.background = element_rect(fill = 'steelblue1', color = 'black', size = 3),
panel.background = element_blank()
)
ggtitle('Item Weights Reported by Outlet')
iris_theme <- theme(
plot.background = element_rect(fill = 'lavender', color = 'black', size = 3),
panel.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
strip.background = element_blank(),
axis.title.x = element_text(face = 'bold', size = 12),
axis.title.y = element_text(face = 'bold', size = 12),
axis.text.x = element_text(face = 'bold', size = 11),
axis.text.y = element_text(face = 'bold', size = 11),
legend.title = element_text(face = 'bold', size = 12),
legend.text = element_text(face = 'bold', size = 11)
)
bigmart_theme <- theme(
plot.background = element_rect(fill = 'steelblue1', color = 'black', size = 3),
panel.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
strip.background = element_blank(),
axis.title.x = element_text(face = 'bold', size = 12),
axis.title.y = element_text(face = 'bold', size = 12),
axis.text.x = element_text(face = 'bold', size = 11),
axis.text.y = element_text(face = 'bold', size = 11),
legend.title = element_text(face = 'bold', size = 12),
legend.text = element_text(face = 'bold', size = 11)
)
data %>%
ggplot(aes(x=Outlet_Identifier, y=Item_Weight)) +
geom_boxplot() +
theme_classic() +
bigmart_theme +
ggtitle('Item Weights Reported by Outlet')
?geom_boxplot
data %>%
ggplot(aes(x=Outlet_Identifier, y=Item_Weight)) +
geom_boxplot(color = 'gray') +
theme_classic() +
bigmart_theme +
ggtitle('Item Weights Reported by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Item_Weight)) +
geom_boxplot(fill = 'gray') +
theme_classic() +
bigmart_theme +
ggtitle('Item Weights Reported by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_boxplot(fill = 'gray') +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_bar(fill = 'gray') +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_bar(stat = 'identity', fill = 'gray') +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_bar(stat = 'identity', fill = 'black') +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point() +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
?geom_point
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 'f', size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 'x', size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Try by Outlet_Type:
data %>%
ggplot(aes(x=Outlet_Type, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size on Outlet Type')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Try by Outlet_Type:
data %>%
ggplot(aes(x=Outlet_Type, y=Outlet_Size)) +
geom_point(shape = ..count.., size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size on Outlet Type')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Try by Outlet_Type:
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(aes(shape = ..count..), size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size on Outlet Type')
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Print Outlet_Types of the 3 outlets missing Outlet_Size:
data %>%
filter(Outlet_Identifier %ion% c('OUT010', 'OUT013', 'OUT045')) %>%
do(print(data$Outlet_Type))
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Print Outlet_Types of the 3 outlets missing Outlet_Size:
data %>%
filter(Outlet_Identifier %in% c('OUT010', 'OUT013', 'OUT045')) %>%
do(print(data$Outlet_Type))
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Print Outlet_Types of the 3 outlets missing Outlet_Size:
data %>%
filter(Outlet_Identifier %in% c('OUT010', 'OUT013', 'OUT045')) %>%
do(unique(data$Outlet_Type))
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Print Outlet_Types of the 3 outlets missing Outlet_Size:
data %>%
filter(Outlet_Identifier %in% c('OUT010', 'OUT013', 'OUT045')) %>%
distinct(Outlet_Type)
data %>% filter(Outlet_Identifier %in% c('OUT010', 'OUT013', 'OUT045')) %>% print()
?print
?print.tbl
data %>% filter(Outlet_Identifier %in% c('OUT010', 'OUT013', 'OUT045')) %>% select(Outlet_Type)
data %>% filter(Outlet_Identifier == 'OUT010') %>% distinct(Outlet_Type)
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Print Outlet_Types of the 3 outlets missing Outlet_Size:
data %>% filter(Outlet_Identifier == 'OUT010') %>% distinct(Outlet_Type)
data %>% filter(Outlet_Identifier == 'OUT013') %>% distinct(Outlet_Type)
data %>% filter(Outlet_Identifier == 'OUT045') %>% distinct(Outlet_Type)
calculate_mode <- function(x) {
uniq <- unique(x)
uniq[which.max(tabulate(match(x, uniq)))]
}
data %>%
group_by(Outlet_Type) %>%
summarise(mode = calculate_mode(Outlet_Size))
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Print Outlet_Types of the 3 outlets missing Outlet_Size:
null_outs <- c('OUT010', 'OUT013', 'OUT045')
for (i in 1:length(null_outs)){
data %>% filter(Outlet_Identifier == null_outs[i]) %>% distinct(Outlet_Type)
}
data %>% filter(Outlet_Identifier == 'OUT010') %>% distinct(Outlet_Type)
data %>% filter(Outlet_Identifier == 'OUT013') %>% distinct(Outlet_Type)
data %>% filter(Outlet_Identifier == 'OUT045') %>% distinct(Outlet_Type)
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Print Outlet_Types of the 3 outlets missing Outlet_Size:
null_outs <- c('OUT010', 'OUT013', 'OUT045')
for (i in 1:length(null_outs)){
data %>% filter(Outlet_Identifier == null_outs[i]) %>% distinct(Outlet_Type)
}
#data %>% filter(Outlet_Identifier == 'OUT010') %>% distinct(Outlet_Type)
#data %>% filter(Outlet_Identifier == 'OUT013') %>% distinct(Outlet_Type)
#data %>% filter(Outlet_Identifier == 'OUT045') %>% distinct(Outlet_Type)
names(data)
library(tidyverse)
#Read in train and test data
train <- read_csv('train.csv')
test <- read_csv('test.csv')
#We'll label our data based on whether it comes from the train or test set to be separated later, but for now we'll join the tibbles to perform some tidying operations
train['source'] <- 'train'
test['source'] <- 'test'
data <- train %>%
full_join(test)
#Check out the dimensions of train, test, and data just to make sure everything joined as planned
dim(train)
dim(test)
dim(data)
#Look at data in a bit mroe detail
str(data)
head(data)
names(data)
#Just as an example, a simple way to look at the different values a discrete variable can take:
unique(data$Outlet_Type)
#Print number of NA values in each column in data
sapply(data, function(x) sum(length(which(is.na(x)))))
#Let's have a look at the quantitative variables in data
data %>%
select_if(is.numeric) %>%
summary()
#To inspect our categorical variables, print the number of unique values per column
sapply(data, function(x) length(unique(x)))
categorical_freqs <- data %>%
select_if(is.character) %>%
select(-one_of(c('Item_Identifier', 'Outlet_Identifier', 'source'))) %>%
apply(2, table)
categorical_freqs
#First check out where these nulls are coming from
data %>%
filter(is.na(data$Item_Weight) == TRUE) %>%
do(head(., 20))
bigmart_theme <- theme(
plot.background = element_rect(fill = 'steelblue1', color = 'black', size = 3),
panel.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
strip.background = element_blank(),
axis.title.x = element_text(face = 'bold', size = 12),
axis.title.y = element_text(face = 'bold', size = 12),
axis.text.x = element_text(face = 'bold', size = 11),
axis.text.y = element_text(face = 'bold', size = 11),
legend.title = element_text(face = 'bold', size = 12),
legend.text = element_text(face = 'bold', size = 11)
)
data %>%
ggplot(aes(x=Outlet_Identifier, y=Item_Weight)) +
geom_boxplot(fill = 'gray') +
theme_classic() +
bigmart_theme +
ggtitle('Item Weights Reported by Outlet')
#Take a quick look at the distribution of 'Item_Weight' to see if there's any reason to prefer mean over median or vice versa
summary(data$Item_Weight)
#Impute Item_Weight by its median to take care of missing values
data <- data %>%
replace_na(list(Item_Weight = median(data$Item_Weight, na.rm = TRUE)))
summary(data$Item_Weight)
data %>%
ggplot(aes(x=Outlet_Identifier, y=Outlet_Size)) +
geom_point(shape = 8, size = 5) +
theme_classic() +
bigmart_theme +
ggtitle('Outlet Size by Outlet')
#Print Outlet_Types of the 3 outlets missing Outlet_Size:
data %>% filter(Outlet_Identifier == 'OUT010') %>% distinct(Outlet_Type)
data %>% filter(Outlet_Identifier == 'OUT013') %>% distinct(Outlet_Type)
data %>% filter(Outlet_Identifier == 'OUT045') %>% distinct(Outlet_Type)
calculate_mode <- function(x) {
uniq <- unique(x)
uniq[which.max(tabulate(match(x, uniq)))]
}
data %>%
group_by(Outlet_Type) %>%
summarise(mode = calculate_mode(Outlet_Size))
#Replace NAs in Outlet_Size with the its mode based on Outlet_Type.
#Note: It is actually quicker for me (and R) in this case to just assign the value 'Small' to our 2 Supermarket Type1 and 1 Grocery Store outlets with NAs in Outlet_Size, but using conditionals within replace_na is just more fun ;p And it's an example of what one might do if there were more null cases
data <- data %>%
replace_na(list(Outlet_Size = ifelse(data$Outlet_Type == 'Grocery Store' || data$Outlet_Type == 'Supermarket Type1', 'Small', ifelse(data$Outlet_Type == 'Supermarket Type2' || data$Outlet_Type == 'Supermarket Type3', 'Medium'))))
#Once more print out the number of missing values for each column, confirming that Item_Weight and Outlet_Size are indeed null-free
sapply(data, function(x) sum(length(which(is.na(x)))))
#Print out the mean sales grouped by Outlet_Type
data %>%
group_by(Outlet_Type) %>%
summarise(mean_sales = mean(Item_Outlet_Sales, na.rm = TRUE))
#Group by the item ID and replace zero values in Item_Visibility with the corresponding item's average visibility across all stores
data <- data %>%
group_by(Item_Identifier) %>%
mutate(Item_Visibility = replace(Item_Visibility, Item_Visibility == 0, mean(Item_Visibility)))
summary(data$Item_Visibility)
#Calculate the new variable, 'Item_Visibility_MeanRatio'
data <- data %>%
group_by(Item_Identifier) %>%
mutate(Item_Mean_Visibility = mean(Item_Visibility)) %>%
mutate(Item_Visibility_MeanRatio = Item_Visibility / Item_Mean_Visibility) %>%
select(-Item_Mean_Visibility)
data %>%
group_by(Item_Type) %>%
summarise(mean_by_type = mean(Item_Outlet_Sales, na.rm=TRUE)) %>%
arrange(desc(mean_by_type))
data %>%
filter(Item_Type == 'Others') %>%
do(head(.))
data %>%
filter(grepl('NC', Item_Identifier)) %>%
group_by(Item_Type) %>%
distinct(Item_Type)
#Add item types to variables representing our new categories
sales_high <- c('Starchy Foods', 'Seafood', 'Fruits and Vegetables', 'Snack Foods', 'Household', 'Dairy', 'Canned', 'Breads')
sales_med <- c('Meat', 'Hard Drinks', 'Frozen Foods', 'Breakfast')
#Create the categories 'High Sales', 'Medium Sales', and 'Low Sales' in new column, 'Item_Type_Aggregate'
data <- data %>%
group_by() %>%
mutate(Item_Type_Aggregate = ifelse(data$Item_Type %in% sales_high, 'High Sales', ifelse(data$Item_Type %in% sales_med, 'Medium Sales', 'Low Sales')))
data %>%
group_by(Item_Type_Aggregate) %>%
distinct(Item_Type_Aggregate)
#Subtract year established from 2013, as 2013 is the year in which this sales data was collected
data  <- data %>%
mutate(Outlet_Years = 2013 - Outlet_Establishment_Year)
summary(data$Outlet_Years)
#Just a reminder of what the existing category names are
data %>%
group_by(Item_Fat_Content) %>%
distinct(Item_Fat_Content)
#Replace redundant category names with 'Low Fat' and 'Regular' for the sake of consistency
data$Item_Fat_Content <- recode(data$Item_Fat_Content,
LF = 'Low Fat',
`low fat` = 'Low Fat',
reg = 'Regular')
#And we musn't forget to change the fat content label for non-consumable items
data <- data %>%
mutate(Item_Fat_Content = replace(Item_Fat_Content, grepl('NC', Item_Identifier), 'Non-Consumable'))
#Check to make sure we have just the two categories remaining
data %>% group_by(Item_Fat_Content) %>% select(Item_Fat_Content) %>% apply(2, table)
names(data)
write_csv(data, 'bigmart_tidy.csv')
library(shiny)
?renderPlot
runApp('BigmartSales_Viz')
?read.csv
getwd()
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
?geom_density
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_point() +
geom_smooth()
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_density() +
geom_smooth()
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_density(stat = 'identity') +
geom_smooth()
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_density(stat = 'identity') +
geom_smooth()
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales / Item_MRP)) +
geom_density(stat = 'identity') +
geom_smooth()
#Simply Item_Outlet_Sales on Item_MRP
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_density(stat = 'identity') +
geom_smooth() +
bigmart_theme
#And dividing sales by the price to adjust for the fact that sales is basically price * quantity
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales / Item_MRP)) +
geom_density(stat = 'identity') +
geom_smooth()
#Simply Item_Outlet_Sales on Item_MRP
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_density(stat = 'identity') +
geom_smooth(color = red, size = 3) +
bigmart_theme
#Simply Item_Outlet_Sales on Item_MRP
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_density(stat = 'identity') +
geom_smooth(color = 'red', size = 3) +
bigmart_theme
#And dividing sales by the price to adjust for the fact that sales is basically price * quantity
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales / Item_MRP)) +
geom_density(stat = 'identity') +
geom_smooth(color = 'red', size = 3) +
bigmart_theme
#Simply Item_Outlet_Sales on Item_MRP
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_density(stat = 'identity') +
geom_smooth(color = 'red', size = 1.5) +
bigmart_theme
#And dividing sales by the price to adjust for the fact that sales is basically price * quantity
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales / Item_MRP)) +
geom_density(stat = 'identity') +
geom_smooth(color = 'red', size = 1.5) +
bigmart_theme
#Simply Item_Outlet_Sales on Item_MRP
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales)) +
geom_density(stat = 'identity') +
geom_smooth(color = 'red', size = 1.5) +
ggtitle('Sales on Item_MRP') +
bigmart_theme
#And dividing sales by the price to adjust for the fact that sales is basically price * quantity
ggplot(data, aes(x = Item_MRP, y = Item_Outlet_Sales / Item_MRP)) +
geom_density(stat = 'identity') +
geom_smooth(color = 'red', size = 1.5) +
ggtitle('Sales/Item_MRP on Item_MRP') +
bigmart_theme
names(data)
ggplot(data, aes(x = Item_Weight, y = Item_Outlet_Sales / Item_MRP)) +
geom_density(stat = 'identity') +
geom_smooth(color = 'red', size = 1.5) +
ggtitle('Sales/Item_MRP on Item_MRP') +
bigmart_theme
ggplot(data, aes(x = Item_Weight, y = Item_Outlet_Sales / Item_MRP)) +
geom_density(stat = 'identity') +
geom_smooth(color = 'red', size = 1.5) +
ggtitle('Sales/Item_MRP on Item_MRP') +
bigmart_theme
ggplot(data, aes(x = Item_Weight, y = Item_Outlet_Sales / Item_MRP)) +
geom_smooth(color = 'red', size = 1.5) +
ggtitle('Sales/Item_MRP on Item_MRP') +
bigmart_theme
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
?geom_jitter
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
bold_theme <- theme(
axis.title.x = element_text(face = 'bold', size = 12),
axis.title.y = element_text(face = 'bold', size = 12),
axis.text.x = element_text(face = 'bold', size = 11),
axis.text.y = element_text(face = 'bold', size = 11),
legend.title = element_text(face = 'bold', size = 12),
legend.text = element_text(face = 'bold', size = 11)
)
ggplot(data = data, aes_string(x = Item_Visibility_MeanRatio, y = Item_Outlet_Sales, color = Outlet_Type)) +
geom_point() +
geom_smooth(color = 'red', size = 1.5) +
geom_jitter() +
ylab('Sales') +
ggtitle('Sales on Item Visibility (Mean Ratio)') +
bold_theme
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
library(shiny); runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
runApp('BigmartSales_Viz/bigmart_sales_viz_app.R')
